//
//  ofxJenOscState.h
//  example_ofxJenOsc
//
//  Created by Mitchell Nordine on 1/11/2014.
//
//

#ifndef __example_ofxJenOsc__ofxJenOscState__
#define __example_ofxJenOsc__ofxJenOscState__

#include "ofMain.h"
#include "ofxOscReceiver.h"

namespace ofxJenOsc {

    /// Represents the different type of musical durations within Jen.
    /// These will also be used to index the `playheads` vector within `State`.
    enum Measure {
        Song,
        Part,
        Segment,
        Bar,
        Minim,
        Beat,
        Quaver,
        SemiQuaver,
        TotalMeasures
    };

    /// Represents a playhead for a given duration.
    class Playhead {
    public:

        Playhead(unsigned int _durationInTicks = 0)
        : durationInTicks(_durationInTicks)
        , positionInTicks(0) {
        }
        
        /// Return the position of the playhead within the duration as a percentage.
        double percentage() const;

        unsigned int durationInTicks;
        unsigned int positionInTicks;

    };

    /// Represents the state of a Note.
    class Note {
    public:

        Note(unsigned int _id, unsigned int durationInTicks, float _velocity = 1.0f)
        : id(_id)
        , playhead(durationInTicks)
        , velocity(_velocity) {
        }
        
        unsigned int id;
        Playhead playhead;
        float velocity;
        
    };

    /// Represents the different types of Rhythms generated by Jen.
    enum RhythmType {
        Kick,
        Snare,
        Ghost,
        Ride,
        Layer,
        Bass,
        Melodic,
        Chordal,
        Atmos
    };

    /// Represents the state of a Rhythm.
    class Rhythm {
    public:
        
        Rhythm(RhythmType _type, unsigned int durationInTicks, unsigned int _totalNumOfNotes)
        : type(_type)
        , playhead(durationInTicks)
        , totalNumOfNotes(_totalNumOfNotes) {
        }
        
        const RhythmType type;
        Playhead playhead;
        unsigned int totalNumOfNotes;
        /// Stores only the currently playing notes.
        vector<Note> notes;

    };
    
    /// Represents the state of an Instrument.
    class Instrument {
    public:

        Instrument(RhythmType _type, string _name, unsigned int durationInTicks)
        : type(_type)
        , name(_name)
        , playhead(durationInTicks) {
        }

        const RhythmType type;
        const string name;
        Playhead playhead;
        float amp;
        float pan; /// -1.0 is far left, 0.0 is center and 1.0 is far right.

    };

    /// Represents the entire state of Jen. By calling `update`, the state will
    /// check for OSC messages and update its entire state accordingly.
    class State {
    public:

        State()
        : playheads(TotalMeasures, Playhead()) {
        }
        
        void update();

        const Playhead* getPlayhead(Measure measure);
        vector<const Playhead*> getPlayheads();
        vector<const Rhythm*> getRhythms();
        vector<const Rhythm*> getRhythmsOfType(RhythmType type);
        vector<const Instrument*> getInstruments();
        vector<const Instrument*> getInstrumentsOfType(RhythmType type);

    private:

        ofxOscReceiver oscReceiver;
        vector<Playhead> playheads;
        vector<Rhythm> rhythms;
        vector<Instrument> instruments;

    };

}

#endif /* defined(__example_ofxJenOsc__ofxJenOscState__) */
