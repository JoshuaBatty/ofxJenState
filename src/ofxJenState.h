//
//  ofxJenOscState.h
//  example_ofxJenOsc
//
//  Created by Mitchell Nordine on 1/11/2014.
//
//

#pragma once

#include "ofMain.h"
#include "ofxOsc.h"
#include "Modulator.h"


namespace ofxJenState {

    /// Represents the different type of musical durations within Jen.
    /// These will also be used to index the `playheads` vector within `State`.
    enum Measure {
        Phrase,
        Segment,
        Bar,
        Minim,
        Beat,
        Quaver,
        SemiQuaver,
        TotalMeasures
    };
    
    class PlayheadPositions : public Modulator{
    public:
        PlayheadPositions(){
            for(int i = 0; i < TotalMeasures; i++){
                params.push_back(0.0);
            }
        }
    };
    
    class PlayheadBangs : public Modulator {
    public:
        PlayheadBangs(){
            for(int i = 0; i < TotalMeasures; i++){
                params.push_back(0.0);
            }
        }
    };

    /// Represents the different types of Patterns generated by Jen.
    enum PatternType {
        SNARE,
        KICK,
        RIDE,
        GHOST,
        BASS,
        MELODIC,
        CHORDAL
    };
    
    
    enum InstrumentParam{
        RMS,
        PERC,
        PAN,
        NOTE_ON,
        TotalInstrumentParams
    };
    
    /// Represents the state of an Instrument.
    class Instrument: public Modulator {
    public:

        Instrument(PatternType _type)
        : type(_type) {
            switch (_type) {
                case SNARE: name = "Snare"; break;
                case KICK: name = "kick"; break;
                case RIDE: name = "Ride"; break;
                case GHOST: name = "Ghost"; break;
                case BASS: name = "Bass"; break;
                case MELODIC: name = "Melodic"; break;
                case CHORDAL: name = "Chordal"; break;
                    
                default:
                    break;
            }
            
            for(int i = 0; i < TotalInstrumentParams; i++){
                params.push_back(0.0);
            }
        }

        PatternType type;
        string name;
    };
    
    class Instruments: public Modulator {
    public:
        Instruments()
        {
            instruments.reserve(8);
            instruments.push_back(Instrument(SNARE));
            instruments.push_back(Instrument(KICK));
            instruments.push_back(Instrument(RIDE));
            instruments.push_back(Instrument(GHOST));
            instruments.push_back(Instrument(BASS));
            instruments.push_back(Instrument(MELODIC));
            instruments.push_back(Instrument(CHORDAL));
            
        }
        vector<Instrument> instruments;
        vector<Modulator*> getChildren();
    };
    
    enum BusParams{
        BUS_RMS,
        BUS_PAN,
        TotalBusParams
    };
    
    class Bus : public Modulator {
    public:
        Bus(string _name)
        : name(_name)
        {
            for(int i = 0; i < TotalBusParams; i++){
                params.push_back(0.0);
            }
        }
        string name;
    };
    
    class Busses: public Modulator{
    public:
        Busses()
        {
            busses.reserve(5);
            busses.push_back(Bus("Bus 1"));
            busses.push_back(Bus("Bus 2"));
            busses.push_back(Bus("Bus 3"));
            busses.push_back(Bus("Bus 4"));
            busses.push_back(Bus("Bus 5"));
        }
        vector<Bus> busses;
        vector<Modulator*> getChildren();
    };

    /// Represents the entire state of Jen. By calling `update`, the state will
    /// check for OSC messages and update its entire state accordingly.
    class State: public Modulator {
    public:

        ~State(){
        }
        
        State()
        : master("MASTER")
        {
            OSC_PORT = 9001;
            osc.setup(OSC_PORT);
        }
        
        void update();
        void update_osc();
        vector<Modulator*> getChildren();

        Instruments instruments;
        PlayheadBangs playhead_bangs;
        PlayheadPositions playhead_positions;
        Busses busses;
        Bus master;
       
        //Receiver receiver;
        ofxOscReceiver osc;
        int OSC_PORT;

    };

}


